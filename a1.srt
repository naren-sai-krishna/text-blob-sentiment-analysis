1
00: 00: 01,550 -> 00: 00: 07,240
इस वीडियो में हम स्टैक अमूर्त डेटा प्रकारों के बारे में बात करने जा रहे हैं।

2
00: 00: 07,430 -> 00: 00: 09,130
तो चलो शुरू करते है।

3
00: 00: 09,170 -> 00: 00: 12,680
और जैसा कि मैंने पहले कहा था कि यह एक सार डेटा प्रकार है।

4
00: 00: 12,860 -> 00: 00: 1 9 .070
हम आमतौर पर जावा में उदाहरण के लिए इंटरफेस के साथ अमूर्त डेटा प्रकारों का प्रतिनिधित्व करते हैं।

5
00: 00: 1 9, 4040 -> 00: 00: 24,220
बुनियादी परिचालन पोप पुश और चोटी हैं।

6
00: 00: 24,350 -> 00: 00: 2 9, 430
इसमें एक तथाकथित घातक संरचना है जिसका अर्थ है कि लास्ट इन फर्स्ट आउट।

7
00: 00: 2 9, 480 -> 00: 00: 36,1 9 0
तो आखिरी वस्तु डालने वाला पहला आइटम होगा जिसे हम बाहर लेते हैं।

8
00: 00: 36,270 -> 00: 00: 42,540
यह बहुत महत्वपूर्ण है कि प्रोग्रामिंग भाषाओं के उच्चतम स्तर में जिसे आसानी से कार्यान्वित किया जा सकता है

9
00: 00: 42,600 -> 00: 00: 51,000
या तो सरणी या भाषाविदों के साथ और कई प्रोग्रामिंग भाषाएं उन्मुख अर्थ हैं

10
00: 00: 51,000 -> 00: 00: 53,470
सबसे बुनियादी परिचालन को परिभाषित करें।

1 1
00: 00: 53,490 -> 00: 01: 00,570
उदाहरण के लिए कॉन्सर्ट पर एक कोर्रेक्टर प्रिंट करने के दो नंबर जोड़ रहे हैं या फिर अपने तर्क लेने के रूप में

12
00: 01: 00,570 -> 00: 01: 05,840
ढेर से और किसी भी वापसी मूल्य वापस ढेर पर रखे।

13
00: 01: 06,270 -> 00: 01: 09,320
तो उदाहरण के लिए हमारे पास यह पुश ऑपरेशन है।

14
00: 01: 09,480 -> 00: 01: 13,040
हमने दिए गए आइटम को ढेर के शीर्ष पर रखा है।

15
00: 01: 13,080 -> 00: 01: 15,000
यह एक बहुत ही सरल ऑपरेशन है।

16
00: 01: 15,000 -> 00: 01: 18,770
यह ऑर्डोवर में किया जा सकता है और समय जटिलता पर भी लागत हो सकती है।

17
00: 01: 18, 9 60 -> 00: 01: 26,500
तो हम उस स्टैक पर 12 को धक्का देना चाहते हैं जिसे हम अभी डालेंगे तो हम 56 को दबाएंगे।

18
00: 01: 26,610 -> 00: 01: 2 9, 670
हम इसे 12 के शीर्ष पर रखने जा रहे हैं।

19
00: 01: 30,030 -> 00: 01: 32,300
हम 88 को धक्का दे रहे हैं।

20
00: 01: 32,310 -> 00: 01: 36,070
यह अगले आइटम होने जा रहा है जिसे हम ढेर के माध्यम से दबा रहे हैं।

21
00: 01: 36,0 9 0 -> 00: 01: 41,240
ठीक है तो पुश ऑपरेशन मूल रूप से स्टैक में आइटम जोड़ रहा है।

22
00: 01: 41,250 -> 00: 01: 43,500
पॉप ऑपरेशन के बारे में क्या।

23
00: 01: 43,590 -> 00: 01: 47,780
हम आखिरी वस्तु लेते हैं जिसे हमने ढेर के शीर्ष पर डाला है।

24
00: 01: 47,790 -> 00: 01: 49,650
यह तथाकथित जीवन शक्ति संरचना है।

25
00: 01: 49,650 -> 00: 01: 50,980
जैसा मैंने पहले कहा।

26
00: 01: 50, 9 80 -> 00: 01: 56,100
तो हमने जो आखिरी आइटम डाला है वह पहला आइटम होगा जिसे हम बाहर लेते हैं।

27
00: 01: 56,250 -> 00: 01: 57, 9 0 9
यह एक बहुत ही सरल ऑपरेशन है।

28
00: 01: 57, 9 0 9 -> 00: 02: 03,270
यह कोस्टानज़ो में भी किया जा सकता है या समय जटिलता नहीं चाहता है।

29
00: 02: 03,390 -> 00: 02: 10,620
तो अगर हम इस टैगगर्ट पोप को कॉल करते हैं तो यह आखिरी वस्तु खींचने या डालने जा रहा है और हमने इसे डाला है

30
00: 02: 10,620 -> 00: 02: 11,430
88।

31
00: 02: 11,430 -> 00: 02: 15,040
इसलिए यही कारण है कि इसे ढेर से बाहर निकाला जा रहा है।

32
00: 02: 15,370 -> 00: 02: 18,4 9 0
ठीक है अगर हम पॉप विधि को फिर से कॉल करते हैं।

33
00: 02: 18,610 -> 00: 02: 23,550
फिर यह अगले आइटम को पॉप आउट करने जा रहा है जो 56 है।

34
00: 02: 23,580 -> 00: 02: 25,660
तो सहयोग के बारे में क्या।

35
00: 02: 25,860 -> 00: 02: 31,670
यह आइटम को इसे हटाए बिना ढेर के शीर्ष से वापस करने जा रहा है।

36
00: 02: 31,680 -> 00: 02: 36,050
यह फिर से एक बहुत ही सरल ऑपरेशन है जिसे निरंतर समय जटिलता में किया जा सकता है।

37
00: 02: 36,060 -> 00: 02: 43,320
तो चोटी और पॉप विधि के बीच क्या अंतर है, पॉप पदार्थ आखिरी को हटाने जा रहा है

38
00: 02: 43,380 -> 00: 02: 45,110
ढेर से आइटम।

39
00: 02: 45,150 -> 00: 02: 47,730
शिखर विधि दिखाने जा रहा है।

40
00: 02: 47,730 -> 00: 02: 53,030
तो यह इसे हटाए बिना अंतिम आइटम का मूल्य वापस करने जा रहा है।

41
00: 02: 53,070 -> 00: 02: 57,860
तो ढेर में वस्तुओं का आकार बदलने वाला नहीं है।

42
00: 02: 57,870 -> 00: 02: 58,250
ठीक।

43
00: 02: 58,260 -> 00: 03: 03,050
तो अगर हम चोटी विधि को कॉल करते हैं तो 88 वापस आ जाएगा।

44
00: 03: 03,180 -> 00: 03: 08,940
लेकिन ढेर की संरचना वही बना है जिसका मतलब है कि हम 88 को हटाने नहीं जा रहे हैं।

45
00: 03: 09,0 9 0 -> 00: 03: 11,760
हम बस आपको अच्छी तरह से लेने जा रहे हैं।

46
00: 03: 12,150 -> 00: 03: 16,350
तो स्टैक अमूर्त डेटा प्रकार के अनुप्रयोगों के बारे में क्या।

47
00: 03: 16,350 -> 00: 03: 21, 9 10
बेशक स्टैक उन्मुख प्रोग्रामिंग भाषाओं में हम Ptak को एक सार डेटा प्रकार के रूप में उपयोग कर सकते हैं।

48
00: 03: 22,170 -> 00: 03: 28,330
और बहुत सारे ग्रोफ एल्गोरिदम जो उस डेटा जैसे स्टैक अमूर्त डेटा प्रकारों पर भारी निर्भर करते हैं

49
00: 03: 28,330 -> 00: 03: 31,480
खोज के लिए ढेर के मानचित्र के साथ लागू किया जा सकता है।

50
00: 03: 31,680 -> 00: 03: 33,050
ठीक है हम इसे लागू कर सकते हैं।

51
00: 03: 33,060 -> 00: 03: 36,370
हमारे पास रिकर्सन है लेकिन हम इसे कार्यान्वित कर सकते हैं।

52
00: 03: 36,370 -> 00: 03: 38,270
हमारे पास ढेर भी हैं।

53
00: 03: 38,490 -> 00: 03: 45,930
या ग्राफ में तेल या चक्र ढूंढना भारी मात्रा में डेटा प्रकार या दृढ़ता से खोज पर निर्भर करता है

54
00: 03: 45,930 -> 00: 03: 48,120
एक ग्राफ में जुड़े घटक।

55
00: 03: 48,210 -> 00: 03: 55,770
उदाहरण के लिए Cazayoux एल्गोरिदम के लिए हमें निश्चित रूप से एक अंतर्निहित सार डेटा प्रकार के रूप में ढेर का उपयोग करना होगा।

56
00: 03: 55,770 -> 00: 03: 59,310
तो मूल रूप से यह मुख्य रूप से ढेर के बारे में है।

57
00: 03: 59,310 -> 00: 04: 00,230
देखने के लिए धन्यवाद।

​